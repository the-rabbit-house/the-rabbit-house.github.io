import{al as t}from"./vendor.2063859a.js";class e extends t{constructor(){super(...arguments),this.DB_VERSION=1,this.DB_NAME="Disc",this._writeCmds=["add","put","delete"]}async initDb(){if(void 0!==this._db)return this._db;if(!("indexedDB"in window))throw this.unavailable("This browser doesn't support IndexedDB");return new Promise(((t,r)=>{const i=indexedDB.open(this.DB_NAME,this.DB_VERSION);i.onupgradeneeded=e.doUpgrade,i.onsuccess=()=>{this._db=i.result,t(i.result)},i.onerror=()=>r(i.error),i.onblocked=()=>{console.warn("db blocked")}}))}static doUpgrade(t){const e=t.target.result;switch(t.oldVersion){case 0:case 1:default:e.objectStoreNames.contains("FileStorage")&&e.deleteObjectStore("FileStorage");e.createObjectStore("FileStorage",{keyPath:"path"}).createIndex("by_folder","folder")}}async dbRequest(t,e){const r=-1!==this._writeCmds.indexOf(t)?"readwrite":"readonly";return this.initDb().then((i=>new Promise(((o,s)=>{const a=i.transaction(["FileStorage"],r).objectStore("FileStorage")[t](...e);a.onsuccess=()=>o(a.result),a.onerror=()=>s(a.error)}))))}async dbIndexRequest(t,e,r){const i=-1!==this._writeCmds.indexOf(e)?"readwrite":"readonly";return this.initDb().then((o=>new Promise(((s,a)=>{const d=o.transaction(["FileStorage"],i).objectStore("FileStorage").index(t)[e](...r);d.onsuccess=()=>s(d.result),d.onerror=()=>a(d.error)}))))}getPath(t,e){const r=void 0!==e?e.replace(/^[/]+|[/]+$/g,""):"";let i="";return void 0!==t&&(i+="/"+t),""!==e&&(i+="/"+r),i}async clear(){(await this.initDb()).transaction(["FileStorage"],"readwrite").objectStore("FileStorage").clear()}async readFile(t){const e=this.getPath(t.directory,t.path),r=await this.dbRequest("get",[e]);if(void 0===r)throw Error("File does not exist.");return{data:r.content?r.content:""}}async writeFile(t){const e=this.getPath(t.directory,t.path),r=t.data,i=t.recursive,o=await this.dbRequest("get",[e]);if(o&&"directory"===o.type)throw"The supplied path is a directory.";const s=t.encoding,a=e.substr(0,e.lastIndexOf("/"));if(void 0===await this.dbRequest("get",[a])){const e=a.indexOf("/",1);if(-1!==e){const r=a.substr(e);await this.mkdir({path:r,directory:t.directory,recursive:i})}}const d=Date.now(),n={path:e,folder:a,type:"file",size:r.length,ctime:d,mtime:d,content:!s&&r.indexOf(",")>=0?r.split(",")[1]:r};return await this.dbRequest("put",[n]),{uri:n.path}}async appendFile(t){const e=this.getPath(t.directory,t.path);let r=t.data;const i=e.substr(0,e.lastIndexOf("/")),o=Date.now();let s=o;const a=await this.dbRequest("get",[e]);if(a&&"directory"===a.type)throw"The supplied path is a directory.";if(void 0===await this.dbRequest("get",[i])){const e=i.indexOf("/",1);if(-1!==e){const r=i.substr(e);await this.mkdir({path:r,directory:t.directory,recursive:!0})}}void 0!==a&&(r=a.content+r,s=a.ctime);const d={path:e,folder:i,type:"file",size:r.length,ctime:s,mtime:o,content:r};await this.dbRequest("put",[d])}async deleteFile(t){const e=this.getPath(t.directory,t.path);if(void 0===await this.dbRequest("get",[e]))throw Error("File does not exist.");if(0!==(await this.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(e)])).length)throw Error("Folder is not empty.");await this.dbRequest("delete",[e])}async mkdir(t){const e=this.getPath(t.directory,t.path),r=t.recursive,i=e.substr(0,e.lastIndexOf("/")),o=(e.match(/\//g)||[]).length,s=await this.dbRequest("get",[i]),a=await this.dbRequest("get",[e]);if(1===o)throw Error("Cannot create Root directory");if(void 0!==a)throw Error("Current directory does already exist.");if(!r&&2!==o&&void 0===s)throw Error("Parent directory must exist");if(r&&2!==o&&void 0===s){const e=i.substr(i.indexOf("/",1));await this.mkdir({path:e,directory:t.directory,recursive:r})}const d=Date.now(),n={path:e,folder:i,type:"directory",size:0,ctime:d,mtime:d};await this.dbRequest("put",[n])}async rmdir(t){const{path:e,directory:r,recursive:i}=t,o=this.getPath(r,e),s=await this.dbRequest("get",[o]);if(void 0===s)throw Error("Folder does not exist.");if("directory"!==s.type)throw Error("Requested path is not a directory");const a=await this.readdir({path:e,directory:r});if(0!==a.files.length&&!i)throw Error("Folder is not empty");for(const d of a.files){const t=`${e}/${d}`;"file"===(await this.stat({path:t,directory:r})).type?await this.deleteFile({path:t,directory:r}):await this.rmdir({path:t,directory:r,recursive:i})}await this.dbRequest("delete",[o])}async readdir(t){const e=this.getPath(t.directory,t.path),r=await this.dbRequest("get",[e]);if(""!==t.path&&void 0===r)throw Error("Folder does not exist.");return{files:(await this.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(e)])).map((t=>t.substring(e.length+1)))}}async getUri(t){const e=this.getPath(t.directory,t.path);let r=await this.dbRequest("get",[e]);return void 0===r&&(r=await this.dbRequest("get",[e+"/"])),{uri:(null==r?void 0:r.path)||e}}async stat(t){const e=this.getPath(t.directory,t.path);let r=await this.dbRequest("get",[e]);if(void 0===r&&(r=await this.dbRequest("get",[e+"/"])),void 0===r)throw Error("Entry does not exist.");return{type:r.type,size:r.size,ctime:r.ctime,mtime:r.mtime,uri:r.path}}async rename(t){return this._copy(t,!0)}async copy(t){return this._copy(t,!1)}async requestPermissions(){return{publicStorage:"granted"}}async checkPermissions(){return{publicStorage:"granted"}}async _copy(t,e=!1){let{toDirectory:r}=t;const{to:i,from:o,directory:s}=t;if(!i||!o)throw Error("Both to and from must be provided");r||(r=s);const a=this.getPath(s,o),d=this.getPath(r,i);if(a===d)return;if(d.startsWith(a))throw Error("To path cannot contain the from path");let n;try{n=await this.stat({path:i,directory:r})}catch(l){const t=i.split("/");t.pop();const e=t.join("/");if(t.length>0){if("directory"!==(await this.stat({path:e,directory:r})).type)throw new Error("Parent directory of the to path is a file")}}if(n&&"directory"===n.type)throw new Error("Cannot overwrite a directory with a file");const c=await this.stat({path:o,directory:s}),h=async(t,e,i)=>{const o=this.getPath(r,t),s=await this.dbRequest("get",[o]);s.ctime=e,s.mtime=i,await this.dbRequest("put",[s])},y=c.ctime?c.ctime:Date.now();switch(c.type){case"file":{const t=await this.readFile({path:o,directory:s});return e&&await this.deleteFile({path:o,directory:s}),await this.writeFile({path:i,directory:r,data:t.data}),void(e&&await h(i,y,c.mtime))}case"directory":{if(n)throw Error("Cannot move a directory over an existing object");try{await this.mkdir({path:i,directory:r,recursive:!1}),e&&await h(i,y,c.mtime)}catch(l){}const t=(await this.readdir({path:o,directory:s})).files;for(const a of t)await this._copy({from:`${o}/${a}`,to:`${i}/${a}`,directory:s,toDirectory:r},e);e&&await this.rmdir({path:o,directory:s})}}}}e._debug=!0;export{e as FilesystemWeb};
